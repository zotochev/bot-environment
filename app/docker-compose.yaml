services:
    nginx:
      image: nginx
      volumes:
        - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      ports:
        - 8080:80

    echo-bot:
      build:
        context: ./echo_bot

      logging:
        options:
          max-size: "1m"
          max-file: "3"

      volumes:
        - ./echo_bot:/app

      # command: sleep 10000
      # command: python /app/main.py
      command: supervisord -c /app/supervisord.conf

      environment:
        ABC: "ABC"

      env_file:
        - .env

      secrets:
        - echo_bot.env

#    bot:
#        depends_on:
#          - redis
#          - postgres
#    
#        build:
#          context: v3/.
#          dockerfile: Dockerfile.v3
#        logging:
#          options:
#            max-size: "1m"
#            max-file: "3"
#    
#        command: python /app/service.py
#        #command: sleep 10000
#
## env_file:
##     - ./cloudhotel.env
##     - ./credentials.env
#    
#        environment:
#          SUBDOMAIN: "${SUBDOMAIN}"                          # For telegram messages
#          REDIS_HOST: "redis"
#          SERVER_ENVIRONMENT: "${SUBDOMAIN}.docker"
#          PG_PORT: "5432"
#          PG_HOST: "postgres"
#          PG_USER: "impresaone"
#          PG_PASSWORD: "123"
#
#        volumes:
#          - '/var/log/impresaone:/tmp/impresaone/logs'
#          - './postgres/db-restore:/app/restore'
#    
#        extra_hosts:
#          - "host.docker.internal:host-gateway"
#        secrets:
#          - sip.json
#          - t2s.json
#        healthcheck:
#          # https://stackoverflow.com/questions/47088261/restarting-an-unhealthy-docker-container-based-on-healthcheck
#          test: [ "CMD", "python", "/app/call_receiver/src/workers/utils/healthcheck.py" ]
#          interval: 10s

    postgres:
        restart: always    
        image: postgres
    
        environment:
          - POSTGRES_USER=bot
          - POSTGRES_PASSWORD=123
          - POSTGRES_DB=bot
          
        volumes:
          - ./postgres/postgres-data:/var/lib/postgresql/data

    redis:
        image: redis:alpine
        hostname: redis
        command: redis-server
        labels:
          NAME: redis

secrets:
  echo_bot.env:
    file: secrets/echo_bot.env

#   t2s.json:
#     file: call_receiver/secrets/t2s.json

